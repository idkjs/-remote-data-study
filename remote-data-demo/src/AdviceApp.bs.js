// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var RemoteData = require("remotedata-re/src/RemoteData.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Api$ReactHooksTemplate = require("./Api.bs.js");
var Message$ReactHooksTemplate = require("./components/Message.bs.js");
var Spinner$ReactHooksTemplate = require("./components/Spinner.bs.js");
var WebData$ReactHooksTemplate = require("./WebData.bs.js");
var RandomAdvice$ReactHooksTemplate = require("./components/RandomAdvice.bs.js");
var SearchResult$ReactHooksTemplate = require("./components/SearchResult.bs.js");

function reducer(state, action) {
  switch (action.tag | 0) {
    case /* SearchQueryChange */0 :
        return /* record */[
                /* searchQuery */action[0],
                /* searchResult */state[/* searchResult */1],
                /* randomAdvice */state[/* randomAdvice */2]
              ];
    case /* SearchRequest */1 :
        return /* record */[
                /* searchQuery */state[/* searchQuery */0],
                /* searchResult */WebData$ReactHooksTemplate.updateWebData(state[/* searchResult */1], action[0]),
                /* randomAdvice */state[/* randomAdvice */2]
              ];
    case /* RandomAdviceRequest */2 :
        return /* record */[
                /* searchQuery */state[/* searchQuery */0],
                /* searchResult */state[/* searchResult */1],
                /* randomAdvice */WebData$ReactHooksTemplate.updateWebData(state[/* randomAdvice */2], action[0])
              ];
    
  }
}

var initialState = /* record */[
  /* searchQuery */"",
  /* searchResult : NotAsked */0,
  /* randomAdvice : NotAsked */0
];

function fetchRandom(dispatch) {
  Curry._1(dispatch, /* RandomAdviceRequest */Block.__(2, [/* RequestLoading */0]));
  return Api$ReactHooksTemplate.fetchRandomAdvice(/* () */0).then((function (result) {
                if (result.tag) {
                  return Promise.resolve(Curry._1(dispatch, /* RandomAdviceRequest */Block.__(2, [/* RequestError */Block.__(0, ["An error occured! Please, try again."])])));
                } else {
                  return Promise.resolve(Curry._1(dispatch, /* RandomAdviceRequest */Block.__(2, [/* RequestSuccess */Block.__(1, [result[0][/* item */0]])])));
                }
              }));
}

function transformSearchResult(param) {
  return /* record */[
          /* total_results */param[/* total_results */0],
          /* items */Belt_Array.slice(Belt_Array.shuffle(param[/* items */1]), 0, 6)
        ];
}

function searchAdvice(query, dispatch) {
  Curry._1(dispatch, /* SearchRequest */Block.__(1, [/* RequestLoading */0]));
  return Api$ReactHooksTemplate.searchAdvice(query).then((function (result) {
                if (result.tag) {
                  return Promise.resolve(Curry._1(dispatch, /* SearchRequest */Block.__(1, [/* RequestError */Block.__(0, ["An error occured! Please, try again."])])));
                } else {
                  return Promise.resolve(Curry._1(dispatch, /* SearchRequest */Block.__(1, [/* RequestSuccess */Block.__(1, [transformSearchResult(result[0])])])));
                }
              }));
}

function AdviceApp(Props) {
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  React.useEffect((function () {
          fetchRandom(dispatch);
          return ;
        }), ([]));
  var handleSearchChange = function ($$event) {
    var searchQuery = $$event.target.value;
    return Curry._1(dispatch, /* SearchQueryChange */Block.__(0, [searchQuery]));
  };
  var handleKeyDown = function ($$event) {
    var keyCode = $$event.which;
    if (keyCode === 13) {
      searchAdvice(state[/* searchQuery */0], dispatch);
      return /* () */0;
    } else {
      return 0;
    }
  };
  var handleRandomClick = function (param) {
    fetchRandom(dispatch);
    return /* () */0;
  };
  var searchState = state[/* searchResult */1];
  var tmp;
  var exit = 0;
  var data;
  if (typeof searchState === "number") {
    tmp = React.createElement(Message$ReactHooksTemplate.make, {
          text: "You haven't searched yet!",
          type_: /* Information */0
        });
  } else {
    switch (searchState.tag | 0) {
      case /* Loading */0 :
          var match$1 = searchState[0];
          if (match$1 !== undefined) {
            data = match$1;
            exit = 1;
          } else {
            tmp = React.createElement(Spinner$ReactHooksTemplate.make, {
                  show: true
                });
          }
          break;
      case /* Failure */1 :
          tmp = React.createElement(Message$ReactHooksTemplate.make, {
                text: searchState[0],
                type_: /* Error */1
              });
          break;
      case /* Success */2 :
          data = searchState[0];
          exit = 1;
          break;
      
    }
  }
  if (exit === 1) {
    tmp = React.createElement(React.Fragment, undefined, React.createElement(Spinner$ReactHooksTemplate.make, {
              show: RemoteData.isLoading(searchState)
            }), React.createElement(SearchResult$ReactHooksTemplate.make, {
              data: data
            }));
  }
  var match$2 = state[/* randomAdvice */2];
  var tmp$1;
  if (typeof match$2 === "number") {
    tmp$1 = null;
  } else {
    switch (match$2.tag | 0) {
      case /* Loading */0 :
          tmp$1 = React.createElement(React.Fragment, undefined, React.createElement("div", {
                    className: "loader"
                  }), Belt_Option.getWithDefault(Belt_Option.flatMap(match$2[0], (function (data) {
                          return Caml_option.some(React.createElement(RandomAdvice$ReactHooksTemplate.make, {
                                          data: data
                                        }));
                        })), null));
          break;
      case /* Failure */1 :
          tmp$1 = React.createElement("div", undefined, match$2[0]);
          break;
      case /* Success */2 :
          tmp$1 = React.createElement(RandomAdvice$ReactHooksTemplate.make, {
                data: match$2[0]
              });
          break;
      
    }
  }
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "background"
                }), React.createElement("div", {
                  className: "content"
                }, React.createElement("div", {
                      className: "panel"
                    }, React.createElement("h2", {
                          className: "title"
                        }, "Ask for advice"), React.createElement("div", undefined, React.createElement("input", {
                              className: "text-input",
                              disabled: RemoteData.isLoading(state[/* searchResult */1]),
                              placeholder: "Search...",
                              value: state[/* searchQuery */0],
                              onKeyDown: handleKeyDown,
                              onChange: handleSearchChange
                            }), tmp)), React.createElement("div", {
                      className: "delimiter"
                    }), React.createElement("div", {
                      className: "panel"
                    }, React.createElement("button", {
                          disabled: RemoteData.isLoading(state[/* randomAdvice */2]),
                          onClick: handleRandomClick
                        }, "Refresh"), React.createElement("h2", {
                          className: "title title--small"
                        }, "Random wisdom:"), tmp$1)));
}

var maxItems = 6;

var make = AdviceApp;

exports.reducer = reducer;
exports.initialState = initialState;
exports.fetchRandom = fetchRandom;
exports.maxItems = maxItems;
exports.transformSearchResult = transformSearchResult;
exports.searchAdvice = searchAdvice;
exports.make = make;
/* react Not a pure module */
