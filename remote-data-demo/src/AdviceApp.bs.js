// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var RemoteData = require("remotedata-re/src/RemoteData.bs.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Api$ReactHooksTemplate = require("./Api.bs.js");
var Message$ReactHooksTemplate = require("./components/Message.bs.js");
var Spinner$ReactHooksTemplate = require("./components/Spinner.bs.js");
var WebData$ReactHooksTemplate = require("./WebData.bs.js");
var RandomAdvice$ReactHooksTemplate = require("./components/RandomAdvice.bs.js");
var SearchResult$ReactHooksTemplate = require("./components/SearchResult.bs.js");

function reducer(state, action) {
  switch (action.TAG | 0) {
    case /* SearchQueryChange */0 :
        return {
                searchQuery: action._0,
                searchResult: state.searchResult,
                randomAdvice: state.randomAdvice
              };
    case /* SearchRequest */1 :
        return {
                searchQuery: state.searchQuery,
                searchResult: WebData$ReactHooksTemplate.updateWebData(state.searchResult, action._0),
                randomAdvice: state.randomAdvice
              };
    case /* RandomAdviceRequest */2 :
        return {
                searchQuery: state.searchQuery,
                searchResult: state.searchResult,
                randomAdvice: WebData$ReactHooksTemplate.updateWebData(state.randomAdvice, action._0)
              };
    
  }
}

var initialState = {
  searchQuery: "",
  searchResult: /* NotAsked */0,
  randomAdvice: /* NotAsked */0
};

function fetchRandom(dispatch) {
  Curry._1(dispatch, {
        TAG: /* RandomAdviceRequest */2,
        _0: /* RequestLoading */0
      });
  return Api$ReactHooksTemplate.fetchRandomAdvice(undefined).then(function (result) {
              if (result.TAG === /* Ok */0) {
                return Promise.resolve(Curry._1(dispatch, {
                                TAG: /* RandomAdviceRequest */2,
                                _0: {
                                  TAG: /* RequestSuccess */1,
                                  _0: result._0.item
                                }
                              }));
              } else {
                return Promise.resolve(Curry._1(dispatch, {
                                TAG: /* RandomAdviceRequest */2,
                                _0: {
                                  TAG: /* RequestError */0,
                                  _0: "An error occured! Please, try again."
                                }
                              }));
              }
            });
}

function transformSearchResult(param) {
  return {
          total_results: param.total_results,
          items: Belt_Array.slice(Belt_Array.shuffle(param.items), 0, 6)
        };
}

function searchAdvice(query, dispatch) {
  Curry._1(dispatch, {
        TAG: /* SearchRequest */1,
        _0: /* RequestLoading */0
      });
  return Api$ReactHooksTemplate.searchAdvice(query).then(function (result) {
              if (result.TAG === /* Ok */0) {
                return Promise.resolve(Curry._1(dispatch, {
                                TAG: /* SearchRequest */1,
                                _0: {
                                  TAG: /* RequestSuccess */1,
                                  _0: transformSearchResult(result._0)
                                }
                              }));
              } else {
                return Promise.resolve(Curry._1(dispatch, {
                                TAG: /* SearchRequest */1,
                                _0: {
                                  TAG: /* RequestError */0,
                                  _0: "An error occured! Please, try again."
                                }
                              }));
              }
            });
}

function AdviceApp(Props) {
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  React.useEffect((function () {
          fetchRandom(dispatch);
          
        }), []);
  var handleSearchChange = function ($$event) {
    var searchQuery = $$event.target.value;
    return Curry._1(dispatch, {
                TAG: /* SearchQueryChange */0,
                _0: searchQuery
              });
  };
  var handleKeyDown = function ($$event) {
    var keyCode = $$event.which;
    if (keyCode === 13) {
      searchAdvice(state.searchQuery, dispatch);
      return ;
    }
    
  };
  var handleRandomClick = function (param) {
    fetchRandom(dispatch);
    
  };
  var searchState = state.searchResult;
  var tmp;
  var exit = 0;
  var data;
  if (typeof searchState === "number") {
    tmp = React.createElement(Message$ReactHooksTemplate.make, {
          text: "You haven't searched yet!",
          type_: /* Information */0
        });
  } else {
    switch (searchState.TAG | 0) {
      case /* Loading */0 :
          var data$1 = searchState._0;
          if (data$1 !== undefined) {
            data = data$1;
            exit = 1;
          } else {
            tmp = React.createElement(Spinner$ReactHooksTemplate.make, {
                  show: true
                });
          }
          break;
      case /* Failure */1 :
          tmp = React.createElement(Message$ReactHooksTemplate.make, {
                text: searchState._0,
                type_: /* Error */1
              });
          break;
      case /* Success */2 :
          data = searchState._0;
          exit = 1;
          break;
      
    }
  }
  if (exit === 1) {
    tmp = React.createElement(React.Fragment, undefined, React.createElement(Spinner$ReactHooksTemplate.make, {
              show: RemoteData.isLoading(searchState)
            }), React.createElement(SearchResult$ReactHooksTemplate.make, {
              data: data
            }));
  }
  var data$2 = state.randomAdvice;
  var tmp$1;
  if (typeof data$2 === "number") {
    tmp$1 = null;
  } else {
    switch (data$2.TAG | 0) {
      case /* Loading */0 :
          tmp$1 = React.createElement(React.Fragment, undefined, React.createElement("div", {
                    className: "loader"
                  }), Belt_Option.getWithDefault(Belt_Option.flatMap(data$2._0, (function (data) {
                          return Caml_option.some(React.createElement(RandomAdvice$ReactHooksTemplate.make, {
                                          data: data
                                        }));
                        })), null));
          break;
      case /* Failure */1 :
          tmp$1 = React.createElement("div", undefined, data$2._0);
          break;
      case /* Success */2 :
          tmp$1 = React.createElement(RandomAdvice$ReactHooksTemplate.make, {
                data: data$2._0
              });
          break;
      
    }
  }
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "background"
                }), React.createElement("div", {
                  className: "content"
                }, React.createElement("div", {
                      className: "panel"
                    }, React.createElement("h2", {
                          className: "title"
                        }, "Ask for advice"), React.createElement("div", undefined, React.createElement("input", {
                              className: "text-input",
                              disabled: RemoteData.isLoading(state.searchResult),
                              placeholder: "Search...",
                              value: state.searchQuery,
                              onKeyDown: handleKeyDown,
                              onChange: handleSearchChange
                            }), tmp)), React.createElement("div", {
                      className: "delimiter"
                    }), React.createElement("div", {
                      className: "panel"
                    }, React.createElement("button", {
                          disabled: RemoteData.isLoading(state.randomAdvice),
                          onClick: handleRandomClick
                        }, "Refresh"), React.createElement("h2", {
                          className: "title title--small"
                        }, "Random wisdom:"), tmp$1)));
}

var maxItems = 6;

var make = AdviceApp;

exports.reducer = reducer;
exports.initialState = initialState;
exports.fetchRandom = fetchRandom;
exports.maxItems = maxItems;
exports.transformSearchResult = transformSearchResult;
exports.searchAdvice = searchAdvice;
exports.make = make;
/* react Not a pure module */
