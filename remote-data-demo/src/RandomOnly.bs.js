// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var RemoteData = require("remotedata-re/src/RemoteData.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Api$ReactHooksTemplate = require("./Api.bs.js");
var WebData$ReactHooksTemplate = require("./WebData.bs.js");
var RandomAdvice$ReactHooksTemplate = require("./components/RandomAdvice.bs.js");

function reducer(state, action) {
  return /* record */[/* randomAdvice */WebData$ReactHooksTemplate.updateWebData(state[/* randomAdvice */0], action[0])];
}

var initialState = /* record */[/* randomAdvice : NotAsked */0];

function fetchRandom(dispatch) {
  Curry._1(dispatch, /* RandomAdviceRequest */[/* RequestLoading */0]);
  return Api$ReactHooksTemplate.fetchRandomAdvice(/* () */0).then((function (result) {
                if (result.tag) {
                  return Promise.resolve(Curry._1(dispatch, /* RandomAdviceRequest */[/* RequestError */Block.__(0, ["An error occured! Please, try again."])]));
                } else {
                  return Promise.resolve(Curry._1(dispatch, /* RandomAdviceRequest */[/* RequestSuccess */Block.__(1, [result[0][/* item */0]])]));
                }
              }));
}

function RandomOnly(Props) {
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  React.useEffect((function () {
          fetchRandom(dispatch);
          return ;
        }), ([]));
  var handleRandomClick = function (param) {
    fetchRandom(dispatch);
    return /* () */0;
  };
  var match$1 = state[/* randomAdvice */0];
  var tmp;
  if (typeof match$1 === "number") {
    tmp = null;
  } else {
    switch (match$1.tag | 0) {
      case /* Loading */0 :
          tmp = React.createElement(React.Fragment, undefined, React.createElement("div", {
                    className: "loader"
                  }), Belt_Option.getWithDefault(Belt_Option.flatMap(match$1[0], (function (data) {
                          return Caml_option.some(React.createElement(RandomAdvice$ReactHooksTemplate.make, {
                                          data: data
                                        }));
                        })), null));
          break;
      case /* Failure */1 :
          tmp = React.createElement("div", undefined, match$1[0]);
          break;
      case /* Success */2 :
          tmp = React.createElement(RandomAdvice$ReactHooksTemplate.make, {
                data: match$1[0]
              });
          break;
      
    }
  }
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "background"
                }), React.createElement("div", {
                  className: "content"
                }, React.createElement("div", {
                      className: "panel"
                    }, React.createElement("h2", {
                          className: "title"
                        }, "Ask for advice")), React.createElement("div", {
                      className: "delimiter"
                    }), React.createElement("div", {
                      className: "panel"
                    }, React.createElement("button", {
                          disabled: RemoteData.isLoading(state[/* randomAdvice */0]),
                          onClick: handleRandomClick
                        }, "Refresh"), React.createElement("h2", {
                          className: "title title--small"
                        }, "Random wisdom:"), tmp)));
}

var make = RandomOnly;

exports.reducer = reducer;
exports.initialState = initialState;
exports.fetchRandom = fetchRandom;
exports.make = make;
/* react Not a pure module */
