// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var RemoteData = require("remotedata-re/src/RemoteData.bs.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Api$ReactHooksTemplate = require("./Api.bs.js");
var WebData$ReactHooksTemplate = require("./WebData.bs.js");
var RandomAdvice$ReactHooksTemplate = require("./components/RandomAdvice.bs.js");

function reducer(state, action) {
  return {
          randomAdvice: WebData$ReactHooksTemplate.updateWebData(state.randomAdvice, action._0)
        };
}

var initialState = {
  randomAdvice: /* NotAsked */0
};

function fetchRandom(dispatch) {
  Curry._1(dispatch, /* RandomAdviceRequest */{
        _0: /* RequestLoading */0
      });
  return Api$ReactHooksTemplate.fetchRandomAdvice(undefined).then(function (result) {
              if (result.TAG === /* Ok */0) {
                return Promise.resolve(Curry._1(dispatch, /* RandomAdviceRequest */{
                                _0: {
                                  TAG: /* RequestSuccess */1,
                                  _0: result._0.item
                                }
                              }));
              } else {
                return Promise.resolve(Curry._1(dispatch, /* RandomAdviceRequest */{
                                _0: {
                                  TAG: /* RequestError */0,
                                  _0: "An error occured! Please, try again."
                                }
                              }));
              }
            });
}

function RandomOnly(Props) {
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  React.useEffect((function () {
          fetchRandom(dispatch);
          
        }), []);
  var handleRandomClick = function (param) {
    fetchRandom(dispatch);
    
  };
  var data = state.randomAdvice;
  var tmp;
  if (typeof data === "number") {
    tmp = null;
  } else {
    switch (data.TAG | 0) {
      case /* Loading */0 :
          tmp = React.createElement(React.Fragment, undefined, React.createElement("div", {
                    className: "loader"
                  }), Belt_Option.getWithDefault(Belt_Option.flatMap(data._0, (function (data) {
                          return Caml_option.some(React.createElement(RandomAdvice$ReactHooksTemplate.make, {
                                          data: data
                                        }));
                        })), null));
          break;
      case /* Failure */1 :
          tmp = React.createElement("div", undefined, data._0);
          break;
      case /* Success */2 :
          tmp = React.createElement(RandomAdvice$ReactHooksTemplate.make, {
                data: data._0
              });
          break;
      
    }
  }
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "background"
                }), React.createElement("div", {
                  className: "content"
                }, React.createElement("div", {
                      className: "panel"
                    }, React.createElement("h2", {
                          className: "title"
                        }, "Ask for advice")), React.createElement("div", {
                      className: "delimiter"
                    }), React.createElement("div", {
                      className: "panel"
                    }, React.createElement("button", {
                          disabled: RemoteData.isLoading(state.randomAdvice),
                          onClick: handleRandomClick
                        }, "Refresh"), React.createElement("h2", {
                          className: "title title--small"
                        }, "Random wisdom:"), tmp)));
}

var make = RandomOnly;

exports.reducer = reducer;
exports.initialState = initialState;
exports.fetchRandom = fetchRandom;
exports.make = make;
/* react Not a pure module */
